#!/usr/bin/env bash
set -e

fast='false'
runtests='false'
runalltests='false'
verbose='false'
tagsdynamic='false'

usage() {
    echo 'Usage:  build.sh [<flags>]'
    echo ''
    echo 'Builds the "metadb" executable in the bin directory'
    echo ''
    echo 'Flags:'
    echo '-T  Run tests'
    echo '-t  Run tests and other checks'
    # echo '    go install golang.org/x/tools/cmd/deadcode@latest'
    echo '-v  Enable verbose output'
    echo '-f  Fast build (do not remove executable before compiling)'
    echo '-d  Compile with dynamic tags'
    echo '-h  Help'
}

while getopts 'fhJtvTd' flag; do
    case "${flag}" in
        T) runtests='true' ;;
        t) runalltests='true' ;;
        f) fast='true' ;;
        J) echo "build.sh: -J option is deprecated" 1>&2 ;;
        h) usage
            exit 1 ;;
        v) verbose='true' ;;
        d) tagsdynamic='true' ;;
        *) usage
            exit 1 ;;
    esac
done

shift $(($OPTIND - 1))
for arg; do
    if [ $arg = 'help' ]
    then
        usage
        exit 1
    fi
    echo "build.sh: unknown argument: $arg" 1>&2
    exit 1
done

if $verbose; then
    v='-v'
fi

tags=''

if $tagsdynamic; then
    tags='dynamic'
fi

if [ -n "$tags" ]; then
    tags="-tags $tags"
fi

bindir=bin

if ! $fast; then
    rm -f ./$bindir/metadb
fi

if [[ -v METADB_FOLIO ]]; then
    echo 'build.sh: The METADB_FOLIO environment variable is no longer supported.' 1>&2
    echo 'build.sh: Use the "alter system" command instead.' 1>&2
    exit 1
fi

mkdir -p $bindir

version=`git describe --always`

go build -o $bindir $v $tags -ldflags "-X github.com/metadb-project/metadb/cmd/metadb/util.MetadbVersion=$version" ./cmd/metadb

if $runtests || $runalltests; then
    go test $v $tags -vet=off -count=1 ./cmd/metadb/command 1>&2
#    go test $v $tags -vet=off -count=1 ./cmd/metadb/dbx 1>&2
#    go test $v $tags -vet=off -count=1 ./cmd/metadb/parser 1>&2
#    go test $v $tags -vet=off -count=1 ./cmd/metadb/sqlx 1>&2
    go test $v $tags -vet=off -count=1 ./cmd/metadb/util 1>&2
fi

if $runalltests; then
    go vet $v $tags $(go list ./cmd/... | grep -v 'github.com/metadb-project/metadb/cmd/metadb/parser') 2>&1 | while read s; do echo "build.sh: $s" 1>&2; done
    #go vet $v $tags -vettool=$GOPATH/bin/shadow ./cmd/... 2>&1 | while read s; do echo "build.sh: $s" 1>&2; done
    go tool shadow ./cmd/...
    # deadcode -test ./cmd/... 2>&1 | while read s; do echo "build.sh: deadcode: $s" 1>&2; done
    if $verbose; then
        # Using -verbose outputs the function signature for .errcheck.
	verrcheck='-verbose'
    fi
    go tool errcheck $verrcheck -exclude .errcheck ./cmd/... 2>&1 | while read s; do echo "build.sh: errcheck: $s" 1>&2; done
    #go tool govulncheck ./cmd/...
fi
