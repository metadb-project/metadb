// Code generated by goyacc -l -o gram.go gram.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

import (
	"github.com/metadb-project/metadb/cmd/metadb/ast"
)

type yySymType struct {
	yys               int
	str               string
	tableparamlist    []string
	funcparamtypelist []string
	optlist           []ast.Option
	node              ast.Node
	pass              bool
}

const DEREGISTER = 57346
const FUNCTION = 57347
const PURGE = 57348
const REGISTER = 57349
const SELECT = 57350
const SYSTEM = 57351
const TABLE = 57352
const CONSISTENCY = 57353
const CREATE = 57354
const GRANT = 57355
const REVOKE = 57356
const ACCESS = 57357
const ALTER = 57358
const DATA = 57359
const SOURCE = 57360
const ORIGIN = 57361
const OPTIONS = 57362
const USER = 57363
const AUTHORIZE = 57364
const DEAUTHORIZE = 57365
const ON = 57366
const ALL = 57367
const TABLES = 57368
const IN = 57369
const TO = 57370
const WITH = 57371
const MAPPING = 57372
const LIST = 57373
const REFRESH = 57374
const INFERRED = 57375
const COLUMN = 57376
const TYPES = 57377
const TYPE = 57378
const TRUE = 57379
const FALSE = 57380
const VERIFY = 57381
const FOR = 57382
const FROM = 57383
const PATH = 57384
const SCHEMA = 57385
const VERSION = 57386
const ADD = 57387
const SET = 57388
const DROP = 57389
const IDENT = 57390
const NUMBER = 57391
const SLITERAL = 57392

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"DEREGISTER",
	"FUNCTION",
	"PURGE",
	"REGISTER",
	"SELECT",
	"SYSTEM",
	"TABLE",
	"CONSISTENCY",
	"CREATE",
	"GRANT",
	"REVOKE",
	"ACCESS",
	"ALTER",
	"DATA",
	"SOURCE",
	"ORIGIN",
	"OPTIONS",
	"USER",
	"AUTHORIZE",
	"DEAUTHORIZE",
	"ON",
	"ALL",
	"TABLES",
	"IN",
	"TO",
	"WITH",
	"MAPPING",
	"LIST",
	"REFRESH",
	"INFERRED",
	"COLUMN",
	"TYPES",
	"TYPE",
	"TRUE",
	"FALSE",
	"VERIFY",
	"FOR",
	"FROM",
	"PATH",
	"SCHEMA",
	"VERSION",
	"ADD",
	"SET",
	"DROP",
	"IDENT",
	"NUMBER",
	"SLITERAL",
	"'='",
	"';'",
	"'('",
	"')'",
	"','",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 253

var yyAct = [...]uint8{
	115, 178, 140, 165, 112, 177, 113, 185, 127, 217,
	139, 203, 200, 157, 36, 114, 34, 35, 31, 199,
	200, 60, 12, 37, 38, 58, 15, 188, 189, 154,
	239, 182, 32, 33, 151, 60, 146, 150, 237, 58,
	57, 39, 40, 117, 66, 176, 235, 70, 138, 41,
	74, 139, 234, 231, 78, 79, 29, 18, 30, 230,
	224, 222, 238, 201, 85, 197, 87, 184, 180, 174,
	90, 162, 93, 145, 95, 60, 168, 167, 166, 58,
	142, 135, 123, 227, 118, 111, 101, 110, 100, 96,
	116, 84, 82, 233, 232, 122, 141, 143, 67, 60,
	128, 77, 69, 58, 130, 131, 226, 133, 134, 42,
	136, 221, 60, 43, 216, 202, 58, 156, 147, 137,
	144, 132, 94, 86, 68, 163, 109, 61, 108, 209,
	152, 205, 119, 155, 83, 44, 63, 65, 73, 88,
	236, 220, 213, 198, 153, 129, 161, 125, 64, 149,
	72, 128, 148, 124, 175, 179, 98, 181, 179, 173,
	107, 186, 169, 183, 187, 106, 97, 81, 104, 80,
	76, 194, 193, 103, 75, 48, 172, 89, 54, 49,
	105, 53, 190, 191, 192, 159, 121, 196, 102, 195,
	204, 71, 171, 206, 207, 208, 210, 211, 52, 212,
	92, 179, 214, 215, 56, 169, 218, 45, 46, 55,
	219, 62, 170, 160, 223, 47, 99, 225, 51, 50,
	1, 228, 229, 59, 164, 120, 158, 126, 11, 28,
	91, 14, 27, 26, 8, 7, 10, 9, 20, 19,
	17, 13, 6, 25, 24, 4, 3, 2, 22, 21,
	16, 23, 5,
}

var yyPact = [...]int16{
	10, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 92, -1000, -1000, 198, -1000, -1000, 158, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 211, 210, 181, 160, 157, 194, 189, 55,
	94, 200, 118, 68, 84, 56, 55, 173, 120, 55,
	150, 146, 54, 55, 55, 145, 143, 40, -1000, -1000,
	-1000, 100, 39, 55, 83, 55, 110, -1000, 156, 55,
	184, 55, 82, 55, 37, 141, 131, 206, 36, 34,
	163, 155, -1000, 93, -1000, 90, 55, 33, 55, 55,
	-8, 32, 98, 166, 55, 30, -1000, 127, 121, 55,
	-1000, -1000, 117, 55, 55, 80, 55, 55, 29, 55,
	78, -1000, -4, -1000, 46, -1000, 28, 47, -1000, 55,
	21, -17, 77, -1000, 125, 122, -18, -1000, -1000, 55,
	116, -24, 55, 76, -40, -1000, 165, 203, -1000, 55,
	-1000, -1000, -1000, 19, 89, -1000, 31, 202, 175, 159,
	55, -1000, 17, 55, -9, 16, 55, -23, 15, -46,
	55, -1000, -1000, 55, -27, -1000, 55, 55, 55, 46,
	55, 171, 169, -1000, -1000, 13, 115, -35, -1000, -1000,
	-1000, 11, 74, -43, -1000, 55, 97, -1000, -1000, 31,
	-1000, 46, 46, -1000, 95, 55, 55, -1000, 55, 114,
	55, -1000, 55, 73, -45, 55, -1000, -1000, -1000, 55,
	113, 70, 9, 55, -1000, 8, 55, -1000, 64, 41,
	55, 55, -1000, 7, -1000, 1, 44, 43, 0, -6,
	-1000, -1000, 112, -14, -1000, -1000, 12, -1000, -22, -1000,
}

var yyPgo = [...]uint8{
	0, 252, 251, 250, 249, 248, 247, 246, 245, 244,
	243, 242, 241, 240, 239, 238, 237, 236, 235, 234,
	233, 232, 231, 230, 229, 228, 8, 227, 1, 5,
	226, 225, 4, 224, 6, 3, 15, 2, 0, 223,
	220,
}

var yyR1 = [...]int8{
	0, 40, 6, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	8, 1, 11, 18, 19, 16, 16, 3, 9, 9,
	9, 9, 27, 27, 26, 29, 29, 28, 10, 10,
	10, 10, 4, 2, 5, 17, 25, 22, 23, 12,
	13, 30, 31, 32, 32, 33, 33, 34, 35, 35,
	35, 35, 36, 37, 14, 15, 20, 21, 24, 38,
	38, 39,
}

var yyR2 = [...]int8{
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 8, 15, 5, 6, 3, 13, 7, 8,
	10, 11, 1, 3, 1, 1, 3, 1, 7, 8,
	10, 11, 6, 4, 4, 4, 6, 5, 5, 6,
	5, 4, 4, 1, 3, 1, 3, 2, 2, 3,
	3, 2, 1, 1, 12, 12, 3, 5, 3, 1,
	1, 1,
}

var yyChk = [...]int16{
	-1000, -40, -6, -7, -8, -1, -11, -18, -19, -16,
	-17, -25, 12, -12, -22, 16, -3, -13, 47, -14,
	-15, -4, -5, -2, -9, -10, -20, -21, -24, 46,
	48, 8, 22, 23, 6, 7, 4, 13, 14, 31,
	32, 39, 17, 21, 43, 9, 10, 17, 17, 21,
	8, 8, 17, 21, 21, 15, 15, -38, 48, -39,
	44, 33, 11, 18, 30, 19, -38, 30, 40, 46,
	-38, 18, 30, 18, -38, 24, 24, 47, -38, -38,
	24, 24, 52, 34, 52, -38, 40, -38, 29, 21,
	-38, -23, 16, -38, 40, -38, 52, 25, 25, 10,
	52, 52, 25, 10, 5, 25, 10, 5, 35, 36,
	-38, 52, -32, -34, -36, -38, -38, 51, 52, 34,
	-31, 20, -38, 52, 26, 26, -27, -26, -38, 28,
	-38, -38, 41, -38, -38, 52, -38, 41, 52, 55,
	-37, 50, 52, 50, -38, 52, 53, 41, 27, 27,
	55, 52, -38, 28, 53, -38, 41, 53, -30, 20,
	10, -34, 52, 36, -33, -35, 47, 46, 45, -36,
	10, 17, 17, -26, 52, -38, 54, -29, -28, -38,
	52, -38, 54, -29, 52, 53, -38, -38, 54, 55,
	-36, -36, -36, -37, -38, 18, 18, 52, 28, 54,
	55, 52, 41, 54, -32, 34, -35, -37, -37, 34,
	-38, -38, -38, 28, -28, -38, 41, 54, -38, -38,
	28, 41, 52, -38, 52, -38, 42, 42, -38, -38,
	52, 52, 50, 50, 52, 52, 28, 52, 50, 52,
}

var yyDef = [...]int8{
	0, -2, 1, 2, 3, 4, 5, 6, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
	29, 30, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 80,
	81, 0, 0, 0, 0, 0, 0, 36, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 78, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 0, 0,
	54, 53, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 34, 0, 63, 0, 72, 0, 0, 57, 0,
	0, 0, 0, 60, 0, 0, 0, 42, 44, 0,
	0, 0, 0, 0, 0, 77, 0, 0, 35, 0,
	67, 73, 56, 0, 0, 59, 0, 0, 0, 0,
	0, 52, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 64, 31, 0, 0, 65, 0, 0, 0, 0,
	0, 0, 0, 43, 38, 0, 0, 0, 45, 47,
	48, 0, 0, 0, 32, 0, 0, 58, 62, 0,
	68, 0, 0, 71, 0, 0, 0, 39, 0, 0,
	0, 49, 0, 0, 0, 0, 66, 69, 70, 0,
	0, 0, 0, 0, 46, 0, 0, 61, 0, 0,
	0, 0, 40, 0, 50, 0, 0, 0, 0, 0,
	41, 51, 0, 0, 74, 75, 0, 37, 0, 33,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	53, 54, 3, 3, 55, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 52,
	3, 51,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*lexer).node = yyDollar[1].node
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*lexer).pass = true
			// $$ = nil
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*lexer).pass = true
			// $$ = nil
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*lexer).pass = true
			// $$ = nil
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*lexer).pass = true
			// $$ = nil
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*lexer).pass = true
			// $$ = nil
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*lexer).pass = true
			yyVAL.node = &ast.SelectStmt{}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.node = &ast.AlterSystemStmt{ConfigParameter: yyDollar[4].str, Value: yyDollar[6].str}
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.node = &ast.CreateDataSourceStmt{DataSourceName: yyDollar[4].str, TypeName: yyDollar[6].str, Options: yyDollar[7].optlist}
		}
	case 33:
		yyDollar = yyS[yypt-15 : yypt+1]
		{
			yyVAL.node = &ast.CreateDataMappingStmt{TypeName: yyDollar[5].str, TableName: yyDollar[8].str, ColumnName: yyDollar[10].str, Path: yyDollar[12].str, TargetIdentifier: yyDollar[14].str}
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.CreateDataOriginStmt{OriginName: yyDollar[4].str}
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &ast.CreateUserStmt{UserName: yyDollar[3].str, Options: yyDollar[5].optlist}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*lexer).pass = true
		}
	case 37:
		yyDollar = yyS[yypt-13 : yypt+1]
		{
			yyVAL.node = &ast.DropDataMappingStmt{TypeName: yyDollar[5].str, TableName: yyDollar[8].str, ColumnName: yyDollar[10].str, Path: yyDollar[12].str}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.node = &ast.GrantAccessOnAllStmt{UserName: yyDollar[6].str}
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.node = &ast.GrantAccessOnTableStmt{TableName: yyDollar[5].str, UserName: yyDollar[7].str}
		}
	case 40:
		yyDollar = yyS[yypt-10 : yypt+1]
		{
			yyVAL.node = &ast.GrantAccessOnFunctionStmt{FunctionName: yyDollar[5].str, UserName: yyDollar[9].str}
		}
	case 41:
		yyDollar = yyS[yypt-11 : yypt+1]
		{
			yyVAL.node = &ast.GrantAccessOnFunctionStmt{FunctionName: yyDollar[5].str, FunctionParameterTypes: yyDollar[7].funcparamtypelist, UserName: yyDollar[10].str}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tableparamlist = yyDollar[1].tableparamlist
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tableparamlist = append(yyDollar[1].tableparamlist, yyDollar[3].tableparamlist...)
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tableparamlist = []string{yyDollar[1].str}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.funcparamtypelist = yyDollar[1].funcparamtypelist
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.funcparamtypelist = append(yyDollar[1].funcparamtypelist, yyDollar[3].funcparamtypelist...)
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.funcparamtypelist = []string{yyDollar[1].str}
		}
	case 48:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.node = &ast.RevokeAccessOnAllStmt{UserName: yyDollar[6].str}
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.node = &ast.RevokeAccessOnTableStmt{TableName: yyDollar[5].str, UserName: yyDollar[7].str}
		}
	case 50:
		yyDollar = yyS[yypt-10 : yypt+1]
		{
			yyVAL.node = &ast.RevokeAccessOnFunctionStmt{FunctionName: yyDollar[5].str, UserName: yyDollar[9].str}
		}
	case 51:
		yyDollar = yyS[yypt-11 : yypt+1]
		{
			yyVAL.node = &ast.RevokeAccessOnFunctionStmt{FunctionName: yyDollar[5].str, FunctionParameterTypes: yyDollar[7].funcparamtypelist, UserName: yyDollar[10].str}
		}
	case 52:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &ast.PurgeDataDropTableStmt{TableNames: yyDollar[5].tableparamlist}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &ast.DeregisterUserStmt{UserName: yyDollar[3].str}
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &ast.RegisterUserStmt{UserName: yyDollar[3].str}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &ast.DropUserStmt{UserName: yyDollar[3].str}
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &ast.CreateSchemaForUserStmt{UserName: yyDollar[5].str}
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.AlterTableStmt{TableName: yyDollar[3].str, Cmd: (yyDollar[4].node).(*ast.AlterTableCmd)}
		}
	case 58:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.AlterTableCmd{ColumnName: yyDollar[3].str, ColumnType: yyDollar[5].str}
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &ast.AlterDataSourceStmt{DataSourceName: yyDollar[4].str, Options: yyDollar[5].optlist}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.DropDataSourceStmt{DataSourceName: yyDollar[4].str}
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.optlist = yyDollar[3].optlist
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.optlist = yyDollar[3].optlist
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.optlist = yyDollar[1].optlist
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.optlist = append(yyDollar[1].optlist, yyDollar[3].optlist...)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.optlist = yyDollar[1].optlist
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.optlist = append(yyDollar[1].optlist, yyDollar[3].optlist...)
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.optlist = []ast.Option{ast.Option{Name: yyDollar[1].str, Val: yyDollar[2].str}}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.optlist = []ast.Option{ast.Option{Action: "DROP", Name: yyDollar[2].str, Val: ""}}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.optlist = []ast.Option{ast.Option{Action: "SET", Name: yyDollar[2].str, Val: yyDollar[3].str}}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.optlist = []ast.Option{ast.Option{Action: "ADD", Name: yyDollar[2].str, Val: yyDollar[3].str}}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.optlist = []ast.Option{ast.Option{Action: "ADD", Name: yyDollar[1].str, Val: yyDollar[2].str}}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 74:
		yyDollar = yyS[yypt-12 : yypt+1]
		{
			yyVAL.node = &ast.AuthorizeStmt{DataSourceName: yyDollar[9].str, RoleName: yyDollar[11].str}
		}
	case 75:
		yyDollar = yyS[yypt-12 : yypt+1]
		{
			yyVAL.node = &ast.DeauthorizeStmt{DataSourceName: yyDollar[9].str, RoleName: yyDollar[11].str}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &ast.ListStmt{Name: yyDollar[2].str}
		}
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.RefreshInferredColumnTypesStmt{}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &ast.VerifyConsistencyStmt{}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	}
	goto yystack /* stack new state and value */
}
