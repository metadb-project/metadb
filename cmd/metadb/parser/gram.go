// Code generated by goyacc -l -o gram.go gram.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

import (
	"github.com/metadb-project/metadb/cmd/metadb/ast"
)

type yySymType struct {
	yys               int
	str               string
	funcparamtypelist []string
	optlist           []ast.Option
	node              ast.Node
	pass              bool
}

const DEREGISTER = 57346
const FUNCTION = 57347
const REGISTER = 57348
const SELECT = 57349
const TABLE = 57350
const CONSISTENCY = 57351
const CREATE = 57352
const GRANT = 57353
const REVOKE = 57354
const ACCESS = 57355
const ALTER = 57356
const DATA = 57357
const SOURCE = 57358
const ORIGIN = 57359
const OPTIONS = 57360
const USER = 57361
const AUTHORIZE = 57362
const DEAUTHORIZE = 57363
const ON = 57364
const ALL = 57365
const TABLES = 57366
const IN = 57367
const TO = 57368
const WITH = 57369
const MAPPING = 57370
const LIST = 57371
const REFRESH = 57372
const INFERRED = 57373
const COLUMN = 57374
const TYPES = 57375
const TYPE = 57376
const TRUE = 57377
const FALSE = 57378
const VERIFY = 57379
const FOR = 57380
const FROM = 57381
const PATH = 57382
const SCHEMA = 57383
const VERSION = 57384
const ADD = 57385
const SET = 57386
const DROP = 57387
const IDENT = 57388
const NUMBER = 57389
const SLITERAL = 57390

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"DEREGISTER",
	"FUNCTION",
	"REGISTER",
	"SELECT",
	"TABLE",
	"CONSISTENCY",
	"CREATE",
	"GRANT",
	"REVOKE",
	"ACCESS",
	"ALTER",
	"DATA",
	"SOURCE",
	"ORIGIN",
	"OPTIONS",
	"USER",
	"AUTHORIZE",
	"DEAUTHORIZE",
	"ON",
	"ALL",
	"TABLES",
	"IN",
	"TO",
	"WITH",
	"MAPPING",
	"LIST",
	"REFRESH",
	"INFERRED",
	"COLUMN",
	"TYPES",
	"TYPE",
	"TRUE",
	"FALSE",
	"VERIFY",
	"FOR",
	"FROM",
	"PATH",
	"SCHEMA",
	"VERSION",
	"ADD",
	"SET",
	"DROP",
	"IDENT",
	"NUMBER",
	"SLITERAL",
	"';'",
	"'('",
	"')'",
	"','",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 222

var yyAct = [...]uint8{
	103, 154, 102, 143, 100, 101, 153, 191, 122, 178,
	175, 123, 32, 161, 31, 28, 174, 175, 11, 33,
	34, 54, 14, 164, 165, 52, 136, 133, 29, 30,
	158, 121, 208, 128, 122, 209, 51, 35, 36, 206,
	60, 205, 63, 203, 65, 37, 54, 202, 69, 70,
	52, 197, 26, 16, 27, 152, 195, 204, 76, 176,
	78, 172, 160, 156, 150, 83, 127, 85, 54, 146,
	145, 144, 52, 125, 118, 77, 109, 105, 98, 99,
	89, 104, 88, 84, 75, 73, 124, 61, 62, 199,
	54, 194, 113, 114, 52, 116, 117, 190, 119, 38,
	177, 54, 135, 39, 120, 52, 115, 126, 141, 97,
	96, 180, 106, 131, 74, 79, 134, 55, 57, 59,
	207, 193, 187, 173, 132, 40, 112, 111, 140, 130,
	58, 147, 129, 151, 155, 95, 157, 155, 94, 110,
	162, 87, 163, 159, 86, 72, 71, 166, 167, 168,
	68, 67, 92, 93, 44, 91, 80, 48, 43, 169,
	47, 138, 108, 50, 171, 170, 179, 66, 147, 181,
	90, 184, 185, 64, 186, 41, 155, 188, 189, 182,
	183, 192, 42, 149, 148, 82, 49, 56, 196, 139,
	46, 198, 45, 1, 200, 201, 53, 142, 107, 137,
	10, 25, 81, 13, 24, 23, 7, 6, 9, 8,
	18, 17, 15, 12, 5, 22, 21, 4, 3, 2,
	19, 20,
}

var yyPact = [...]int16{
	8, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 84, -1000, -1000, 167, -1000, 139, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 185,
	183, 141, 138, 173, 150, 48, 86, 178, 102, 59,
	50, 48, 157, 48, 151, 129, 128, 48, 48, 124,
	123, 36, -1000, -1000, -1000, 82, 35, 48, 37, 48,
	88, -1000, 137, 171, 48, 34, 48, 121, 118, 33,
	31, 147, 130, -1000, 77, -1000, 75, 48, 30, 48,
	48, 28, 80, 144, -1000, 27, 115, 103, -1000, -1000,
	100, 48, 48, 67, 48, 48, 25, 48, 65, -1000,
	-18, -1000, 38, -1000, 24, -1000, 48, 17, -17, -1000,
	107, 104, 48, 98, -23, 48, 63, -24, -1000, 143,
	181, -1000, 48, -1000, -1000, -1000, 74, -1000, 26, 169,
	168, 15, 48, 4, 14, 48, -21, 13, -37, 48,
	-1000, 48, -28, -1000, 48, 48, 48, 38, 149, 148,
	-1000, 12, 97, -35, -1000, -1000, -1000, 10, 61, -42,
	-1000, 48, 79, -1000, -1000, 26, -1000, 38, 38, -1000,
	48, 48, -1000, 48, 96, 48, -1000, 48, 58, -44,
	48, -1000, -1000, -1000, 95, 52, 7, 48, -1000, 2,
	48, -1000, 49, 48, 48, -1000, -2, -1000, -6, 9,
	-8, -10, -1000, -1000, 94, -1000, -1000, -16, -14, -1000,
}

var yyPgo = [...]uint8{
	0, 221, 220, 219, 218, 217, 216, 215, 214, 213,
	212, 211, 210, 209, 208, 207, 206, 205, 204, 203,
	202, 201, 200, 1, 6, 199, 198, 4, 197, 5,
	3, 2, 11, 0, 196, 193,
}

var yyR1 = [...]int8{
	0, 35, 3, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 5, 8, 15,
	16, 13, 13, 6, 6, 6, 6, 24, 24, 23,
	7, 7, 7, 7, 1, 2, 14, 22, 19, 20,
	9, 10, 25, 26, 27, 27, 28, 28, 29, 30,
	30, 30, 30, 31, 32, 11, 12, 17, 18, 21,
	33, 33, 34,
}

var yyR2 = [...]int8{
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 8, 15,
	5, 6, 3, 7, 8, 10, 11, 1, 3, 1,
	7, 8, 10, 11, 4, 4, 4, 6, 5, 5,
	6, 5, 4, 4, 1, 3, 1, 3, 2, 2,
	3, 3, 2, 1, 1, 12, 12, 3, 5, 3,
	1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -35, -3, -4, -5, -8, -15, -16, -13, -14,
	-22, 10, -9, -19, 14, -10, 45, -11, -12, -2,
	-1, -6, -7, -17, -18, -21, 44, 46, 7, 20,
	21, 6, 4, 11, 12, 29, 30, 37, 15, 19,
	41, 8, 15, 19, 15, 7, 7, 19, 19, 13,
	13, -33, 46, -34, 42, 31, 9, 16, 28, 17,
	-33, 28, 38, -33, 16, -33, 16, 22, 22, -33,
	-33, 22, 22, 49, 32, 49, -33, 38, -33, 27,
	19, -20, 14, -33, 49, -33, 23, 23, 49, 49,
	23, 8, 5, 23, 8, 5, 33, 34, -33, 49,
	-27, -29, -31, -33, -33, 49, 32, -26, 18, 49,
	24, 24, 26, -33, -33, 39, -33, -33, 49, -33,
	39, 49, 52, -32, 48, 49, -33, 49, 50, 25,
	25, -33, 26, 50, -33, 39, 50, -25, 18, 8,
	-29, 34, -28, -30, 45, 44, 43, -31, 15, 15,
	49, -33, 51, -24, -23, -33, 49, -33, 51, -24,
	49, 50, -33, -33, 51, 52, -31, -31, -31, -32,
	16, 16, 49, 26, 51, 52, 49, 39, 51, -27,
	32, -30, -32, -32, -33, -33, -33, 26, -23, -33,
	39, 51, -33, 26, 39, 49, -33, 49, -33, 40,
	-33, -33, 49, 49, 48, 49, 49, 26, 48, 49,
}

var yyDef = [...]int8{
	0, -2, 1, 2, 3, 4, 5, 6, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 21, 22, 23, 24, 25, 26, 27, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 70, 71, 72, 0, 0, 0, 0, 0,
	0, 32, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 67, 0, 69, 0, 0, 0, 0,
	0, 0, 0, 0, 46, 0, 0, 0, 45, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 30,
	0, 54, 0, 63, 0, 48, 0, 0, 0, 51,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 0,
	0, 31, 0, 58, 64, 47, 0, 50, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 0, 56, 0, 0, 0, 0, 0, 0,
	33, 0, 0, 0, 37, 39, 40, 0, 0, 0,
	28, 0, 0, 49, 53, 0, 59, 0, 0, 62,
	0, 0, 34, 0, 0, 0, 41, 0, 0, 0,
	0, 57, 60, 61, 0, 0, 0, 0, 38, 0,
	0, 52, 0, 0, 0, 35, 0, 42, 0, 0,
	0, 0, 36, 43, 0, 65, 66, 0, 0, 29,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	50, 51, 3, 3, 52, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 49,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*lexer).node = yyDollar[1].node
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*lexer).pass = true
			// $$ = nil
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*lexer).pass = true
			// $$ = nil
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*lexer).pass = true
			// $$ = nil
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*lexer).pass = true
			// $$ = nil
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*lexer).pass = true
			// $$ = nil
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*lexer).pass = true
			yyVAL.node = &ast.SelectStmt{}
		}
	case 28:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.node = &ast.CreateDataSourceStmt{DataSourceName: yyDollar[4].str, TypeName: yyDollar[6].str, Options: yyDollar[7].optlist}
		}
	case 29:
		yyDollar = yyS[yypt-15 : yypt+1]
		{
			yyVAL.node = &ast.CreateDataMappingStmt{TypeName: yyDollar[5].str, TableName: yyDollar[8].str, ColumnName: yyDollar[10].str, Path: yyDollar[12].str, TargetIdentifier: yyDollar[14].str}
		}
	case 30:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.CreateDataOriginStmt{OriginName: yyDollar[4].str}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &ast.CreateUserStmt{UserName: yyDollar[3].str, Options: yyDollar[5].optlist}
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*lexer).pass = true
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.node = &ast.GrantAccessOnAllStmt{UserName: yyDollar[6].str}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.node = &ast.GrantAccessOnTableStmt{TableName: yyDollar[5].str, UserName: yyDollar[7].str}
		}
	case 35:
		yyDollar = yyS[yypt-10 : yypt+1]
		{
			yyVAL.node = &ast.GrantAccessOnFunctionStmt{FunctionName: yyDollar[5].str, UserName: yyDollar[9].str}
		}
	case 36:
		yyDollar = yyS[yypt-11 : yypt+1]
		{
			yyVAL.node = &ast.GrantAccessOnFunctionStmt{FunctionName: yyDollar[5].str, FunctionParameterTypes: yyDollar[7].funcparamtypelist, UserName: yyDollar[10].str}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.funcparamtypelist = yyDollar[1].funcparamtypelist
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.funcparamtypelist = append(yyDollar[1].funcparamtypelist, yyDollar[3].funcparamtypelist...)
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.funcparamtypelist = []string{yyDollar[1].str}
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.node = &ast.RevokeAccessOnAllStmt{UserName: yyDollar[6].str}
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.node = &ast.RevokeAccessOnTableStmt{TableName: yyDollar[5].str, UserName: yyDollar[7].str}
		}
	case 42:
		yyDollar = yyS[yypt-10 : yypt+1]
		{
			yyVAL.node = &ast.RevokeAccessOnFunctionStmt{FunctionName: yyDollar[5].str, UserName: yyDollar[9].str}
		}
	case 43:
		yyDollar = yyS[yypt-11 : yypt+1]
		{
			yyVAL.node = &ast.RevokeAccessOnFunctionStmt{FunctionName: yyDollar[5].str, FunctionParameterTypes: yyDollar[7].funcparamtypelist, UserName: yyDollar[10].str}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &ast.DeregisterUserStmt{UserName: yyDollar[3].str}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &ast.RegisterUserStmt{UserName: yyDollar[3].str}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &ast.DropUserStmt{UserName: yyDollar[3].str}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &ast.CreateSchemaForUserStmt{UserName: yyDollar[5].str}
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.AlterTableStmt{TableName: yyDollar[3].str, Cmd: (yyDollar[4].node).(*ast.AlterTableCmd)}
		}
	case 49:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.AlterTableCmd{ColumnName: yyDollar[3].str, ColumnType: yyDollar[5].str}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &ast.AlterDataSourceStmt{DataSourceName: yyDollar[4].str, Options: yyDollar[5].optlist}
		}
	case 51:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.DropDataSourceStmt{DataSourceName: yyDollar[4].str}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.optlist = yyDollar[3].optlist
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.optlist = yyDollar[3].optlist
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.optlist = yyDollar[1].optlist
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.optlist = append(yyDollar[1].optlist, yyDollar[3].optlist...)
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.optlist = yyDollar[1].optlist
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.optlist = append(yyDollar[1].optlist, yyDollar[3].optlist...)
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.optlist = []ast.Option{ast.Option{Name: yyDollar[1].str, Val: yyDollar[2].str}}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.optlist = []ast.Option{ast.Option{Action: "DROP", Name: yyDollar[2].str, Val: ""}}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.optlist = []ast.Option{ast.Option{Action: "SET", Name: yyDollar[2].str, Val: yyDollar[3].str}}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.optlist = []ast.Option{ast.Option{Action: "ADD", Name: yyDollar[2].str, Val: yyDollar[3].str}}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.optlist = []ast.Option{ast.Option{Action: "ADD", Name: yyDollar[1].str, Val: yyDollar[2].str}}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 65:
		yyDollar = yyS[yypt-12 : yypt+1]
		{
			yyVAL.node = &ast.AuthorizeStmt{DataSourceName: yyDollar[9].str, RoleName: yyDollar[11].str}
		}
	case 66:
		yyDollar = yyS[yypt-12 : yypt+1]
		{
			yyVAL.node = &ast.DeauthorizeStmt{DataSourceName: yyDollar[9].str, RoleName: yyDollar[11].str}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &ast.ListStmt{Name: yyDollar[2].str}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.RefreshInferredColumnTypesStmt{}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &ast.VerifyConsistencyStmt{}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	}
	goto yystack /* stack new state and value */
}
